Inductive day : Type :=
  | monday : day
  | tuesday : day
  | wednesday : day
  | thursday : day
  | friday : day
  | saturday : day
  | sunday : day.

Definition next_weekday (d:day) : day :=
  match d with
  | monday => tuesday
  | tuesday => wednesday
  | wednesday => thursday
  | thursday => friday
  | friday => monday
  | saturday => monday
  | sunday => monday
  end.

Eval simpl in (next_weekday friday).
Eval simpl in (next_weekday (next_weekday saturday)).

Example test_next_weekday:
  (next_weekday (next_weekday saturday)) = tuesday.
Proof. simpl. reflexivity. Qed.

Inductive bool : Type :=
  | true : bool
  | false : bool.

Definition negb (b:bool) : bool :=
  match b with
  | true => false
  | false => true
  end.

Definition andb (b1 b2 : bool) : bool :=
  match b1 with
  | true => b2
  | false => false
  end.

Definition orb (b1 b2 : bool) : bool :=
  match b1 with
  | true => true
  | false => b2
  end.

Example test_orb1: (orb true false) = true.
Proof. simpl. reflexivity. Qed.

Definition admit {T: Type} : T. Admitted.

Definition nandb (b1 b2 : bool) : bool := 
  match b2 with
  | false => true
  | true => negb b1
  end.

Example test_nandb1: (nandb true false) = true.
Proof. simpl. reflexivity. Qed.
Example test_nandb2: (nandb false false) = true.
Proof. simpl. reflexivity. Qed.
Example test_nandb3: (nandb false true) = true.
Proof. simpl. reflexivity. Qed.
Example test_nandb4: (nandb true true) = false.
Proof. simpl. reflexivity. Qed.

Definition andb3 (b1 b2 b3 : bool) : bool :=
  andb b1 (andb b2 b3).

Example test_andb31: (andb3 true true true) = true.
Proof. simpl. reflexivity. Qed.
Example test_andb32: (andb3 false true true) = false.
Proof. simpl. reflexivity. Qed.
Example test_andb33: (andb3 true false true) = false.
Proof. simpl. reflexivity. Qed.
Example test_andb34: (andb3 true true false) = false.
Proof. simpl. reflexivity. Qed.

Check true.
Check (negb true).
Check negb.

Module Playground1.

Inductive nat : Type :=
  | O : nat
  | S : nat -> nat.

Definition pred (n : nat) : nat :=
  match n with
  | O => O
  | S (n') => n'
  end.

End Playground1.

Definition minustwo (n : nat) : nat :=
  match n with
  | O => O
  | S O => O
  | S (S n') => n'
  end.

Check (S(S(S(S O)))).
Eval simpl in (minustwo 4).

Check S.
Check pred.
Check minustwo.

Fixpoint evenb (n:nat) : bool :=
  match n with
  | O => true
  | S O => false
  | S (S n') => evenb n'
  end.

Module Playground2.
Fixpoint plus (n m : nat) : nat :=
  match n with
  | O => m
  | S n' => S (plus n' m)
  end.

Eval simpl in (plus (S (S (S O))) (S (S O))).

End Playground2.

Fixpoint exp (base power : nat) : nat :=
  match power with
  | O => S 0
  | S p => mult base (exp base p)
  end.

Example test_mult1: (mult 3 3) = 9.
Proof. simpl. reflexivity. Qed.

Fixpoint factorial (n:nat) : nat :=
  match n with
  | O => S O
  | S n' => mult n (factorial n')
  end.

Example test_factorial1: (factorial 3) = 6.
Proof. simpl. reflexivity. Qed.
Example test_factorial2: (factorial 5) = (mult 10 12).
Proof. simpl. reflexivity. Qed.

Fixpoint beq_nat (n m : nat) : bool :=
  match n with
  | O => match m with
         | O => true
         | S m' => false
         end
  | S n' => match m with
            | O => false
            | S m' => beq_nat n' m'
            end
  end.

Fixpoint ble_nat (n m : nat) : bool :=
  match n with
  | O => true
  | S n' =>
      match m with
      | O => false
      | S m' => ble_nat n' m'
      end
  end.

Definition blt_nat (n m : nat) : bool :=
  andb (ble_nat n m) (negb (beq_nat n m)).
Example test_blt_nat1: (blt_nat 2 2) = false.
Proof. simpl. reflexivity. Qed.
Example test_blt_nat2: (blt_nat 2 4) = true.
Proof. reflexivity. Qed.
Example test_blt_nat3: (blt_nat 4 2) = false.
Proof. reflexivity. Qed.

Theorem plus_0_n : forall n : nat, 0 + n = n.
Proof. simpl. reflexivity. Qed.

Eval simpl in (forall n:nat, n + 0 = n).
Eval simpl in (forall n:nat, 0 + n = n).

Theorem plus_0_n' : forall n : nat, 0 + n = n.
Proof.
  intros n. reflexivity. Qed.

Theorem plus_1_l : forall n : nat, 1 + n = S n.
Proof.
  intros n. reflexivity. Qed.

Theorem plus_id_example : forall n m : nat,
  n = m -> n + n = m + m.
Proof. 
  intros n m.
  intros H.
  rewrite -> H.
  reflexivity.
  Qed.

Theorem plus_id_exercise : forall n m o : nat,
  n = m -> m = o -> n +m = m + o.
Proof.
  intros n m o.
  intros H'.
  intros H''.
  rewrite -> H'.
  rewrite -> H''.
  reflexivity.
  Qed.

Theorem mult_1_plus : forall n m : nat,
  (1 + n) * m = m + (n * m).
Proof.
  intros n m.
  simpl.
  reflexivity.
  Qed.

Theorem plus_1_neq_0_firsttry : forall n : nat,
  beq_nat (n + 1) 0 = false.
Proof.
  intros n. simpl.
Admitted.

Theorem plus_1_neq_0 : forall n : nat,
  beq_nat (n + 1) 0 = false.
Proof.
  intros n. destruct n as [| n'].
    reflexivity. 
    reflexivity.
  Qed.

Theorem negb_involutive : forall b : bool,
  negb (negb b) = b.
Proof.
  intros b. destruct b.
  reflexivity.
  reflexivity.
  Qed.

Theorem zero_nbeq_plus_1 : forall n : nat,
  beq_nat 0 (n + 1) = false.
Proof.
  intros n. destruct n as [| n'].
    reflexivity.
    reflexivity. Qed.

Theorem andb_true_elim1 : forall b c : bool,
  andb b c = true -> b = true.
Proof.
  intros b c H.
  destruct b.
  (* case 1 *)
  reflexivity.
  (* case 2 *)
  rewrite <- H. reflexivity.
  Qed.

Theorem andb_true_elim2 : forall b c : bool,
  andb b c = true -> c = true.
Proof.
  intros b c H.
  destruct c.
    reflexivity.
    rewrite <- H.
    destruct b.
      reflexivity.
      reflexivity. Qed.

Theorem plus_0_r : forall n : nat, n + 0 = n.
Proof.
  intros n. induction n as [| n'].
    reflexivity.
    simpl. rewrite -> IHn'. reflexivity. Qed.

Theorem minus_diag : forall n, minus n n = 0.
Proof.
  intros n. induction n as [| n'].
    reflexivity.
    simpl. rewrite -> IHn'. reflexivity. Qed.

Theorem mult_0_r : forall n : nat,
  n * 0 = 0.
Proof.
  intros n. induction n as [| n'].
    reflexivity.
    simpl. rewrite -> IHn'. reflexivity. Qed.

Theorem plus_n_Sm :  forall n m : nat,
  S (n + m) = n + (S m).
Proof.
  intros n m. induction n as [| n'].
    simpl. reflexivity.
    simpl. rewrite -> IHn'. reflexivity. Qed.

Theorem plus_comm : forall n m : nat,
  n + m = m + n.
Proof.
  intros n m. induction n as [| n'].
    rewrite -> plus_0_r. simpl. reflexivity.
    simpl. rewrite -> IHn'. rewrite -> plus_n_Sm.
      reflexivity. Qed.

Fixpoint double (n:nat) :=
  match n with
  | O => O
  | S n' => S (S (double n'))
  end.

Lemma double_plus : forall n, double n = n + n.
Proof.
  intros n. induction n as [| n'].
    reflexivity.
    simpl. rewrite <- plus_n_Sm. rewrite -> IHn'. reflexivity.
  Qed.

Theorem beq_nat_refl : forall n : nat,
  true = beq_nat n n.
Proof.
  intros n. induction n as [| n'].
    reflexivity.
    simpl. rewrite -> IHn'. reflexivity.
Qed.

Theorem plus_assoc' : forall n m p : nat,
  n + (m + p) = (n + m) + p.
Proof. intros n m p. induction n as [| n']. reflexivity.
  simpl. rewrite -> IHn'. reflexivity. Qed.

Theorem plus_swap : forall n m p : nat,
  n + (m + p) = m + (n + p).
Proof.
  intros n m p.
  assert (H: m + p = p + m).
    rewrite -> plus_comm. reflexivity.
  rewrite -> H.
  assert (H': n + (p + m) = (n + p) + m).
    rewrite -> plus_assoc'. reflexivity.
  rewrite -> H'.
  rewrite -> plus_comm. reflexivity.
Qed.

Theorem mult_one_step : forall m n : nat,
  n * S m = n + n * m.
Proof.
  intros m n.
  induction n as [| n']. simpl. reflexivity.
  simpl. rewrite -> IHn'. rewrite -> plus_swap. reflexivity.
Qed.

Theorem mult_comm : forall m n : nat,
  m * n = n * m.
Proof.
  intros m n.
  induction m as [| m'].
  simpl. induction n as [| n']. simpl. reflexivity.
  simpl. rewrite <- IHn'. reflexivity.
  simpl. rewrite -> IHm'. rewrite -> mult_one_step.
    reflexivity.
Qed.

Theorem evenb_n__oddb_Sn : forall n : nat,
  evenb n = negb (evenb (S n)).
Proof.
  intros n. destruct n as [| n'].
    simpl. reflexivity.
    replace (evenb (S (S n'))) with (evenb n').
    induction n' as [| n'']. simpl. reflexivity.
      rewrite -> IHn''. rewrite -> negb_involutive. 
      simpl.  reflexivity. 
    reflexivity.
Qed.

Theorem ble_nat_refl : forall n : nat,
  true = ble_nat n n.
Proof.
  intros n.
  induction n as [| n'].
    reflexivity.
    simpl. rewrite <- IHn'. reflexivity.
Qed.

Theorem zero_nbeq_S : forall n : nat,
  beq_nat 0 (S n) = false.
Proof.
  intros n. simpl. reflexivity.
Qed.

Theorem andb_false_r : forall b : bool,
  andb b false = false.
Proof.
  intros b.
  destruct b. reflexivity. reflexivity.
Qed.

Theorem plus_ble_compay_1 : forall n m p : nat,
  ble_nat n m = true -> ble_nat (p + n) (p + m) = true.
Proof.
  intros n m p H.
  replace (ble_nat (p + n) (p + m)) with (ble_nat n m).
  rewrite -> H. reflexivity.
  induction p as [| p'].
    reflexivity.
    simpl. rewrite <- IHp'. reflexivity.
Qed.

Theorem S_nbeq_0 : forall n : nat,
  beq_nat (S n) 0 = false.
Proof.
  intros n.
  simpl. reflexivity.
Qed.

Theorem mult_1_l : forall n : nat, 1 * n = n.
Proof.
  intros n.
  simpl. rewrite -> plus_comm. simpl. reflexivity.
Qed.

Theorem all3_spec : forall b c : bool,
  orb
    (andb b c)
    (orb (negb b)
         (negb c))
  = true.
Proof.
  intros b c.
    destruct b.
      simpl. destruct c.
        reflexivity. reflexivity.
      simpl. reflexivity.
Qed.

Theorem mult_plus_distr_r : forall n m p : nat,
  (n + m) * p = (n * p) + (m * p).
Proof.
  intros n m p.
  induction p as [| p'].
  rewrite -> mult_0_r. rewrite -> mult_0_r. rewrite -> mult_0_r.
    reflexivity.
  rewrite -> mult_one_step. rewrite -> IHp'.
  rewrite -> mult_one_step. rewrite -> mult_one_step.
  rewrite -> plus_assoc'. rewrite -> plus_assoc'.
  replace (n + m + n * p') with (n + n * p' + m).
  reflexivity. rewrite -> plus_comm. rewrite -> plus_swap.
  rewrite -> plus_assoc'. reflexivity.
Qed.

Theorem mult_assoc : forall n m p : nat,
  n * (m * p) = (n * m) * p.
Proof.
  intros n m p. induction n as [| n'].
    reflexivity.
    simpl. rewrite -> IHn'. rewrite -> mult_plus_distr_r.
      reflexivity.
Qed.

Theorem plus_swap' : forall n m p : nat,
  n + (m + p) = m + (n + p).
Proof.
  intros n m p.
  (*replace (m + p) with (p + m).*)
  rewrite -> plus_assoc'.
  rewrite -> plus_assoc'.
  replace (n + m) with (m + n).
  reflexivity.
  rewrite -> plus_comm. reflexivity.
Qed.

Inductive bin_nat : Type :=
  | BO : bin_nat
  | BD : bin_nat -> bin_nat
  | BN : bin_nat -> bin_nat.

Fixpoint bin_inc (n : bin_nat) : bin_nat :=
  match n with
  | BO => BN BO
  | BD n' => BN n'
  | BN n' => BD (bin_inc n')
  end.

(*
0 = BO
1 = BN BO
2 = BD (BN BO)
3 = BN (BN BO)
4 = BD (BD (BN BO))
5 = BN (BD (BN BO))
6 = BD (BN (BN BO))
7 = BN (
*)

Fixpoint bin_to_unary (n : bin_nat) : nat :=
  match n with
  | BO => 0
  | BD n' => 2 * (bin_to_unary n')
  | BN n' => 1 + (2 * (bin_to_unary n'))
  end.

Theorem bin_inc_eq_un_inc : forall n : bin_nat,
  bin_to_unary (bin_inc n) = 1 + (bin_to_unary n).
Proof.
  intros n. induction n as [| n' | n'].
  reflexivity.
  reflexivity.
  simpl. rewrite -> IHn'. simpl.
  replace (bin_to_unary n' + 0) with (bin_to_unary n').
  rewrite -> plus_comm. reflexivity.
  rewrite -> plus_comm. reflexivity.
Qed.

Fixpoint unary_to_bin (n : nat) : bin_nat :=
  match n with
  | O => BO
  | S n' => bin_inc (unary_to_bin n')
  end.

Theorem bin_and_back : forall n : nat,
  bin_to_unary (unary_to_bin n) = n.
Proof.
  intros n. induction n as [| n'].
  reflexivity.
  simpl. rewrite -> bin_inc_eq_un_inc.
  rewrite -> IHn'. reflexivity.
Qed.

Fixpoint normalize (n : bin_nat) : bin_nat :=
  match n with
  | BO => BO
  | BN n' => BN (normalize n')
  | BD n' => match (normalize n') with
             | BO => BO
             | BD n'' => BD (BD n'')
             | BN n'' => BD (BN n'')
             end
  end.

Eval simpl in normalize (BD (BN (BD BO))).

Theorem foo : forall n : nat, 
  unary_to_bin (n + n) =
  match unary_to_bin n with
  | BO => BO
  | BD b => BD (BD b)
  | BN b => BD (BN b)
  end.
Proof.
  intros n. induction n as [| n'].
  reflexivity. 
  simpl. rewrite -> plus_comm. simpl. rewrite -> IHn'. simpl.
    destruct (unary_to_bin n'). reflexivity. reflexivity.
    reflexivity.
Qed.

Theorem bar : forall b : bin_nat,
  bin_inc
  (match b with
  | BO => BO
  | BD b' => BD (BD b')
  | BN b' => BD (BN b')
  end)
  =
  BN b.
Proof.
  intros b. destruct b as [| b' | b'].
  reflexivity.
  reflexivity.
  reflexivity.
Qed.

Theorem normalized_inv : forall b : bin_nat,
  unary_to_bin (bin_to_unary b) = normalize b.
Proof.
  intros b. induction b as [| b' | b'].
  reflexivity. 
  simpl. rewrite <- IHb'.
    replace (bin_to_unary b' + 0) with (bin_to_unary b').
    rewrite -> foo. reflexivity.
    rewrite -> plus_comm. reflexivity.
  simpl. rewrite <- IHb'.
    replace (bin_to_unary b' + 0) with (bin_to_unary b').
    rewrite -> foo. rewrite -> bar. reflexivity.
    rewrite -> plus_comm. reflexivity.
Qed.